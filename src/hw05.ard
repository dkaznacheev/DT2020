\import Utils
\import hw03
\import hw04
\import lect05 (Nat-elim, Nat-rec)
\open Nat \hiding (<=)

-- 1. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport' (\lam y => f a b = f a' y) q (transport' (\lam x => f a b = f x b) p idp)

-- 2. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b

-- 3. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\data List (A : \Type) | nil | cons A (List A)

\func \infixl 4 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => reverse xs ++ cons x nil


\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs, ys, zs
  | nil, _, _ => idp
  | cons x xs, ys, zs => pmap (cons x) (++-assoc xs ys zs)

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => go' (reverse ys)
  | cons a xs => pmap (\lam l => l ++ cons a nil) (reverse++ xs ys) *> ++-assoc (reverse ys) (reverse xs) (cons a nil)
  \where
  \func go' {A : \Type} (ys : List A) : ys = ys ++ nil \elim ys
    | nil => idp
    | cons a ys => pmap (cons a) (go' ys)

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | cons a xs => reverse++ (reverse xs) (cons a nil) *> pmap (cons a) (reverse-isInvolutive xs)

-- 4. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k => {?}

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n => {?}

-- 5. Докажите, что (\lam x => not (not x)) = (\lam x => x).

\func not (b : Bool) : Bool
  | true => false
  | false => true

\func notNotId : (\lam x => not (not x)) = (\lam x => x) => path (\lam i x => help x @ i)
  \where
    \func help (x : Bool) : not (not x) = x \elim x
      | true => idp
      | false => idp

-- 6. Определите факториал через Nat-rec.

\func fac' (n : Nat) : Nat => Nat-rec Nat 1 (\lam x y => (suc x) * y) n

-- 7. Докажите ассоциативность сложения для натуральных чисел через Nat-elim.

\func +-assoc' (n m k : Nat) : (n + m) + k = n + (m + k) =>
  Nat-elim (\lam x => (n + m) + x = n + (m + x)) (idp) (\lam _ x => pmap suc x) k

-- 8. Определите рекурсор и элиминатор для D.

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

\func D-elim (P : D -> \Type)
             (c1 : \Pi (n : Nat) -> P (con1 n))
             (c2 : \Pi (d1 d2 : D) -> P d1 -> P d2 -> P (con2 d1 d2))
             (c3 : \Pi (f : Nat -> D) -> (\Pi (n : Nat) -> P (f n)) -> P (con3 f))
             (d : D) : P d \elim d
  | con1 n => c1 n
  | con2 d1 d2 => c2 d1 d2 (D-elim P c1 c2 c3 d1) (D-elim P c1 c2 c3 d2)
  | con3 f => c3 f (\lam n => D-elim P c1 c2 c3 (f n))

\func D-rec (P : \Type)
            (c1 : Nat -> P)
            (c2 : D -> D -> P -> P -> P)
            (c3 : (Nat -> D) -> (Nat -> P) -> P)
            (d : D) : P \elim d
  | con1 n => c1 n
  | con2 d1 d2 => c2 d1 d2 (D-rec P c1 c2 c3 d1) (D-rec P c1 c2 c3 d2)
  | con3 f => c3 f (\lam n => D-rec P c1 c2 c3 (f n))

-- 9. Определите рекурсор и элиминатор для List.

\func List-elim {A : \Type}
                (P : List A -> \Type)
                (nl : P nil)
                (cns : \Pi (a : A) (l : List A) -> P l -> P (cons a l))
                (l : List A) : P l \elim l
  | nil => nl
  | cons a l => cns a l (List-elim P nl cns l)

\func List-rec {A : \Type}
               (P : \Type)
               (nl : P)
               (cns : A -> List A -> P -> P)
               (l : List A) : P \elim l
  | nil => nl
  | cons a l => cns a l (List-rec P nl cns l)

-- 10. Докажите, что 0 не равно suc x.

\func zero/=suc (x : Nat) (p : 0 = suc x) : Empty => transport help p ()
  \where
    \func help (x : Nat) : \Type \elim x
      | 0 => \Sigma
      | suc n => Empty

-- 11. Докажите, что fac не равен suc.

\open Nat(*)

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func fac/=suc (p : fac = suc) : Empty => transport help p ()
  \where
    \func help (x : Nat -> Nat) : \Type => \case x 1 \with {
      | 1 => \Sigma
      | _ => Empty
    }

-- 12. Докажите, что left = right, не используя transport.

\func left=right : left = right => path (\lam i => i)

-- 13. Докажите, что если a = a' и b = b', то (a,b) = (a',b').

\func pairEq {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b') : (a,b) = (a',b') => path (\lam i => (p @ i, q @ i))

-- 14. Докажите, что если p = p', то p.1 = p'.1.

\func projEq {A : \Type} (B : A -> \Type) {p p' : \Sigma (x : A) (B x)} (t : p = p') : p.1 = p'.1 => path (\lam i => (t @ i).1)

-- 15. Докажите версию pmap, которая определена для функций двух аргументов.

\func pmap2' {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  path(\lam i => f (p @ i) (q @ i))

-- 16. Мы видели как определить transport через coe. Определите частный случай coe через transport.
--     Можно ли определить transport через coe0?

\func coe0 (A : I -> \Type) (a : A left) : A right => transport A (left=right) a

-- 17. Определите функцию B right -> B left.

\func Itr' {B : I -> \Type} (b : B right) : B left => transport B (sym left=right) b

-- 18. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p => lect05.J (B a) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- 1. Выразите transport через Jalt.
-- 2. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- 3. Используя эти две конструкции, легко определить J.

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  Jalt (\lam x y _ => B x -> B y) (\lam _ x => x) p b

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p \elim p
  | (x, idp) => idp

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p => transport'' (\lam x => B x.1 x.2) (sigma-contr (a', p)) b
